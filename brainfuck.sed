b main
    # Init
    # First line read is the brainfuck code
    # Insert null byte
    # Memory: Stack in hold space
    # One line per entry
    # First line of the stack is the head.
    # Push: { s/$/\n/; G; h }         x \([^<>]*<>\)  -> x [x]
    # Peek: { g; s/\n.*$// }          x [a] -> a [a]
    # Drop: { x; s/^[^\n]*\n?//; x }  x [a b] -> x [b]
    # Pop:  Peek; Drop
    # Rotate: { x; s/$\n/; G; h             x [a b c] -> a b c x [a b c x]
    #           s/\n.*$//; x; s/$/\n/; G;   a b c x [a b c x] -> a [a b c x] -> a b c x a [a b c x]
    #           s/^[^\n]*\n//;          a b c x a -> b c x a -> 
    #           
    # Swap: { x; s/$/\n/; G; h x [a b c] -> a b c x [a b c x]
    #       }           
    # Stack operations a la lisp 
    # These treat pattern space as a stack, using \x01 as element
    # terminators. Empty stack is a \x01 byte. Front of the stack is ^
    # define(`<>', `r_ascii(0x1)')
    # define(`\([^<>]*<>\)', `\([^<>]*<>\)')
    # Push(x): a b -> x a b
    # Call convention is to push the return address to the end of the stack
    # Ret:     [r x] -> [x] (return to r)
    # Drop:    a b -> b
    # Swap:    a b -> b a
    # Rot: a b c -> b c a
    # Dup: a -> a a
    # 2dup: a b -> a b a b
    # 2drop: a b c -> c
    # 8 bit binary add
    # X Y -> X+Y
        : func_r_add
        # Ripply-carry adder
        # Insert beginning carry bit
        s/^/0<>/
        s/$//; t anon_000001
        : anon_000001
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/00\1<>\2<>\3<>/; t anon_000002
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000002
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/01\1<>\2<>\3<>/; t anon_000002
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000002
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000002
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/10\1<>\2<>\3<>/; t anon_000002
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000002
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/11\1<>\2<>\3<>/; t anon_000002
            : anon_000002
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/00\1<>\2<>\3<>/; t anon_000003
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000003
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/01\1<>\2<>\3<>/; t anon_000003
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000003
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000003
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/10\1<>\2<>\3<>/; t anon_000003
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000003
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/11\1<>\2<>\3<>/; t anon_000003
            : anon_000003
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/00\1<>\2<>\3<>/; t anon_000004
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000004
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/01\1<>\2<>\3<>/; t anon_000004
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000004
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000004
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/10\1<>\2<>\3<>/; t anon_000004
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000004
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/11\1<>\2<>\3<>/; t anon_000004
            : anon_000004
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/00\1<>\2<>\3<>/; t anon_000005
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000005
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/01\1<>\2<>\3<>/; t anon_000005
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000005
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000005
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/10\1<>\2<>\3<>/; t anon_000005
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000005
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/11\1<>\2<>\3<>/; t anon_000005
            : anon_000005
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/00\1<>\2<>\3<>/; t anon_000006
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000006
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/01\1<>\2<>\3<>/; t anon_000006
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000006
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000006
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/10\1<>\2<>\3<>/; t anon_000006
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000006
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/11\1<>\2<>\3<>/; t anon_000006
            : anon_000006
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/00\1<>\2<>\3<>/; t anon_000007
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000007
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/01\1<>\2<>\3<>/; t anon_000007
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000007
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000007
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/10\1<>\2<>\3<>/; t anon_000007
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000007
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/11\1<>\2<>\3<>/; t anon_000007
            : anon_000007
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/00\1<>\2<>\3<>/; t anon_000008
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000008
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/01\1<>\2<>\3<>/; t anon_000008
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000008
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000008
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/10\1<>\2<>\3<>/; t anon_000008
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000008
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/11\1<>\2<>\3<>/; t anon_000008
            : anon_000008
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/00\1<>\2<>\3<>/; t anon_000009
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000009
            s/^0\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/01\1<>\2<>\3<>/; t anon_000009
            s/^0\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000009
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/01\1<>\2<>\3<>/; t anon_000009
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/10\1<>\2<>\3<>/; t anon_000009
            s/^1\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/10\1<>\2<>\3<>/; t anon_000009
            s/^1\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/11\1<>\2<>\3<>/; t anon_000009
            : anon_000009
        # Remove carry bit and X/Y args
        s/^[01]\([01]*\)<>[01]*<>[01]*<>/\1<>/
    b dynamicDispatch
    # Negate 8-bit number
        : func_r_neg
        # Invert each bit one at a time
        s/^\([01]*\)0<>/\11<>/; t anon_0000101
        s/^\([01]*\)1<>/\10<>/;
        : anon_0000101
        s/^\([01]*\)0\([01]\)<>/\11\2<>/; t anon_0000102
        s/^\([01]*\)1\([01]\)<>/\10\2<>/;
        : anon_0000102
        s/^\([01]*\)0\([01][01]\)<>/\11\2<>/; t anon_0000103
        s/^\([01]*\)1\([01][01]\)<>/\10\2<>/;
        : anon_0000103
        s/^\([01]*\)0\([01][01][01]\)<>/\11\2<>/; t anon_0000104
        s/^\([01]*\)1\([01][01][01]\)<>/\10\2<>/;
        : anon_0000104
        s/^\([01]*\)0\([01][01][01][01]\)<>/\11\2<>/; t anon_0000105
        s/^\([01]*\)1\([01][01][01][01]\)<>/\10\2<>/;
        : anon_0000105
        s/^\([01]*\)0\([01][01][01][01][01]\)<>/\11\2<>/; t anon_0000106
        s/^\([01]*\)1\([01][01][01][01][01]\)<>/\10\2<>/;
        : anon_0000106
        s/^\([01]*\)0\([01][01][01][01][01][01]\)<>/\11\2<>/; t anon_0000107
        s/^\([01]*\)1\([01][01][01][01][01][01]\)<>/\10\2<>/;
        : anon_0000107
        s/^\([01]*\)0\([01][01][01][01][01][01][01]\)<>/\11\2<>/; t anon_0000108
        s/^\([01]*\)1\([01][01][01][01][01][01][01]\)<>/\10\2<>/;
        : anon_0000108
    b dynamicDispatch
    # [X Y] -> [X<=Y]
    # BitAnd
        : func_r_bitand
        s/^/<>/
        s/$//; t anon_000011
        : anon_000011
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000012
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000012
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/0\1<>\2<>\3<>/; t anon_000012
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/1\1<>\2<>\3<>/; t anon_000012
            : anon_000012
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000013
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000013
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/0\1<>\2<>\3<>/; t anon_000013
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/1\1<>\2<>\3<>/; t anon_000013
            : anon_000013
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000014
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000014
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/0\1<>\2<>\3<>/; t anon_000014
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/1\1<>\2<>\3<>/; t anon_000014
            : anon_000014
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000015
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000015
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/0\1<>\2<>\3<>/; t anon_000015
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/1\1<>\2<>\3<>/; t anon_000015
            : anon_000015
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000016
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000016
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/0\1<>\2<>\3<>/; t anon_000016
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/1\1<>\2<>\3<>/; t anon_000016
            : anon_000016
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000017
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000017
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/0\1<>\2<>\3<>/; t anon_000017
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/1\1<>\2<>\3<>/; t anon_000017
            : anon_000017
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000018
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000018
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/0\1<>\2<>\3<>/; t anon_000018
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/1\1<>\2<>\3<>/; t anon_000018
            : anon_000018
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000019
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)0<>/0\1<>\2<>\3<>/; t anon_000019
            s/^\([01]*\)<>\([01]*\)0<>\([01]*\)1<>/0\1<>\2<>\3<>/; t anon_000019
            s/^\([01]*\)<>\([01]*\)1<>\([01]*\)1<>/1\1<>\2<>\3<>/; t anon_000019
            : anon_000019
        s/\([^<>]*<>\)\([^<>]*<>\)\([^<>]*<>\)/\1/
    b dynamicDispatch
        : func_r_bin2hex
        s/^\([^<>]*<>\)/\1\1/
        s/^/00001111<>/
        s/$/000001<>/
        b func_r_bitand
        : dynamic_000001
        s/$//; t anon_000020
        : anon_000020
        s/^00000000<>/0<>/; t anon_000021
        s/^00000001<>/1<>/; t anon_000021
        s/^00000010<>/2<>/; t anon_000021
        s/^00000011<>/3<>/; t anon_000021
        s/^00000100<>/4<>/; t anon_000021
        s/^00000101<>/5<>/; t anon_000021
        s/^00000110<>/6<>/; t anon_000021
        s/^00000111<>/7<>/; t anon_000021
        s/^00001000<>/8<>/; t anon_000021
        s/^00001001<>/9<>/; t anon_000021
        s/^00001010<>/A<>/; t anon_000021
        s/^00001011<>/B<>/; t anon_000021
        s/^00001100<>/C<>/; t anon_000021
        s/^00001101<>/D<>/; t anon_000021
        s/^00001110<>/E<>/; t anon_000021
        s/^00001111<>/F<>/; t anon_000021
        : anon_000021
        s/^\([^<>]*<>\)\([^<>]*<>\)/\2\1/
        s/^\([01]*\)[01]<>/0\1<>/
        s/^\([01]*\)[01]<>/0\1<>/
        s/^\([01]*\)[01]<>/0\1<>/
        s/^\([01]*\)[01]<>/0\1<>/
        s/^/00001111<>/
        s/$/000002<>/
        b func_r_bitand
        : dynamic_000002
        s/$//; t anon_000022
        : anon_000022
        s/^00000000<>/0/; t anon_000023
        s/^00000001<>/1/; t anon_000023
        s/^00000010<>/2/; t anon_000023
        s/^00000011<>/3/; t anon_000023
        s/^00000100<>/4/; t anon_000023
        s/^00000101<>/5/; t anon_000023
        s/^00000110<>/6/; t anon_000023
        s/^00000111<>/7/; t anon_000023
        s/^00001000<>/8/; t anon_000023
        s/^00001001<>/9/; t anon_000023
        s/^00001010<>/A/; t anon_000023
        s/^00001011<>/B/; t anon_000023
        s/^00001100<>/C/; t anon_000023
        s/^00001101<>/D/; t anon_000023
        s/^00001110<>/E/; t anon_000023
        s/^00001111<>/F/; t anon_000023
        : anon_000023
        s/^\([0-9A-F]\)<>\([0-9A-F]\)<>/\2\1<>/
    b dynamicDispatch
        : func_r_putc
        s/$/000003<>/
        b func_r_bin2hex
        : dynamic_000003
        s/$//; t anon_000024
        : anon_000024
        /^0/ b anon_0000250
        /^1/ b anon_0000251
        /^2/ b anon_0000252
        /^3/ b anon_0000253
        /^4/ b anon_0000254
        /^5/ b anon_0000255
        /^6/ b anon_0000256
        /^7/ b anon_0000257
        : anon_0000250
        s/^01//; t anon_000025end
        s/^02//; t anon_000025end
        s/^03//; t anon_000025end
        s/^04//; t anon_000025end
        s/^05//; t anon_000025end
        s/^06//; t anon_000025end
        s/^07//; t anon_000025end
        s/^08//; t anon_000025end
        s/^09/	/; t anon_000025end
        s/^0A/\n/; t anon_000025end
        s/^0B//; t anon_000025end
        s/^0C//; t anon_000025end
        s/^0D//; t anon_000025end
        s/^0E//; t anon_000025end
        s/^0F//; t anon_000025end
        : anon_0000251
        s/^11//; t anon_000025end
        s/^12//; t anon_000025end
        s/^13//; t anon_000025end
        s/^14//; t anon_000025end
        s/^15//; t anon_000025end
        s/^16//; t anon_000025end
        s/^17//; t anon_000025end
        s/^18//; t anon_000025end
        s/^19//; t anon_000025end
        s/^1A//; t anon_000025end
        s/^1B//; t anon_000025end
        s/^1C//; t anon_000025end
        s/^1D//; t anon_000025end
        s/^1E//; t anon_000025end
        s/^1F//; t anon_000025end
        : anon_0000252
        s/^20/ /; t anon_000025end
        s/^21/!/; t anon_000025end
        s/^22/"/; t anon_000025end
        s/^23/#/; t tmp_`end'
        s/^24/$/; t anon_000025end
        s/^25/%/; t anon_000025end
        s/^26/&/; t anon_000025end
        s/^27/'/; t anon_000025end
        s/^28/(/; t anon_000025end
        s/^29/)/; t anon_000025end
        s/^2A/*/; t anon_000025end
        s/^2B/+/; t anon_000025end
        s/^2C/,/; t anon_000025end
        s/^2D/-/; t anon_000025end
        s/^2E/./; t anon_000025end
        s/^2F/\//; t anon_000025end
        : anon_0000253
        s/^30/0/; t anon_000025end
        s/^31/1/; t anon_000025end
        s/^32/2/; t anon_000025end
        s/^33/3/; t anon_000025end
        s/^34/4/; t anon_000025end
        s/^35/5/; t anon_000025end
        s/^36/6/; t anon_000025end
        s/^37/7/; t anon_000025end
        s/^38/8/; t anon_000025end
        s/^39/9/; t anon_000025end
        s/^3A/:/; t anon_000025end
        s/^3B/;/; t anon_000025end
        s/^3C/</; t anon_000025end
        s/^3D/=/; t anon_000025end
        s/^3E/>/; t anon_000025end
        s/^3F/?/; t anon_000025end
        : anon_0000254
        s/^40/@/; t anon_000025end
        s/^41/A/; t anon_000025end
        s/^42/B/; t anon_000025end
        s/^43/C/; t anon_000025end
        s/^44/D/; t anon_000025end
        s/^45/E/; t anon_000025end
        s/^46/F/; t anon_000025end
        s/^47/G/; t anon_000025end
        s/^48/H/; t anon_000025end
        s/^49/I/; t anon_000025end
        s/^4A/J/; t anon_000025end
        s/^4B/K/; t anon_000025end
        s/^4C/L/; t anon_000025end
        s/^4D/M/; t anon_000025end
        s/^4E/N/; t anon_000025end
        s/^4F/O/; t anon_000025end
        : anon_0000255
        s/^50/P/; t anon_000025end
        s/^51/Q/; t anon_000025end
        s/^52/R/; t anon_000025end
        s/^53/S/; t anon_000025end
        s/^54/T/; t anon_000025end
        s/^55/U/; t anon_000025end
        s/^56/V/; t anon_000025end
        s/^57/W/; t anon_000025end
        s/^58/X/; t anon_000025end
        s/^59/Y/; t anon_000025end
        s/^5A/Z/; t anon_000025end
        s/^5B/[/; t anon_000025end
        s/^5C/\\/; t anon_000025end
        s/^5D/]/; t anon_000025end
        s/^5E/^/; t anon_000025end
        s/^5F/_/; t anon_000025end
        : anon_0000256
        s/^60/`/; t anon_000025end
        s/^61/a/; t anon_000025end
        s/^62/b/; t anon_000025end
        s/^63/c/; t anon_000025end
        s/^64/d/; t anon_000025end
        s/^65/e/; t anon_000025end
        s/^66/f/; t anon_000025end
        s/^67/g/; t anon_000025end
        s/^68/h/; t anon_000025end
        s/^69/i/; t anon_000025end
        s/^6A/j/; t anon_000025end
        s/^6B/k/; t anon_000025end
        s/^6C/l/; t anon_000025end
        s/^6D/m/; t anon_000025end
        s/^6E/n/; t anon_000025end
        s/^6F/o/; t anon_000025end
        : anon_0000257
        s/^70/p/; t anon_000025end
        s/^71/q/; t anon_000025end
        s/^72/r/; t anon_000025end
        s/^73/s/; t anon_000025end
        s/^74/t/; t anon_000025end
        s/^75/u/; t anon_000025end
        s/^76/v/; t anon_000025end
        s/^77/w/; t anon_000025end
        s/^78/x/; t anon_000025end
        s/^79/y/; t anon_000025end
        s/^7A/z/; t anon_000025end
        s/^7B/{/; t anon_000025end
        s/^7C/|/; t anon_000025end
        s/^7D/}/; t anon_000025end
        s/^7E/~/; t anon_000025end
        s/^7F//; t anon_000025end
        : anon_000025end
        H
        x
        s/\([^<>]*\)<>.*$/\1/
        /\n$/ {
            s/\n$//
            P
            s/^.*$//
        }
        s/\n//g
        x
        s/\([^<>]*<>\)//
    b dynamicDispatch
    # Increment a binary number
#    : increment
#    s/\([01]*\)0$/\11/; t endIncrement
#    s/\([01]*\)01$/\110/; t endIncrement
#    s/\([01]*\)011$/\1110/; t endIncrement
#    s/\([01]*\)0111$/\11110/; t endIncrement
#    s/\([01]*\)01111$/\111110/; t endIncrement
#    s/\([01]*\)011111$/\1111110/; t endIncrement
#    s/\([01]*\)0111111$/\11111110/; t endIncrement
#    s/\([01]*\)01111111$/\111111110/; t endIncrement
#    s/11111111$/00000000/
#    : endIncrement
#
#    : decrement
: main
    s/^.*$/hi<>/g
    s/^/01110000<>/
        s/$/000004<>/
        b func_r_putc
        : dynamic_000004
    s/^/01110001<>/
        s/$/000005<>/
        b func_r_putc
        : dynamic_000005
    s/^/00001010<>/
        s/$/000006<>/
        b func_r_putc
        : dynamic_000006
    b
# TODO make this a tree instead of linear search
# IMPORTANT
# This has to be the very last thing in the file for this code to work
: dynamicDispatch
    # Move return addr from the bottom to the top of the stack for faster
    # searches
    s/^\(.*\)\([0-9][0-9][0-9][0-9][0-9][0-9]<>\)$/\2\1/
        s/$//; t anon_000026
        : anon_000026
        s/^000001<>//; t dynamic_000001
        s/^000002<>//; t dynamic_000002
        s/^000003<>//; t dynamic_000003
        s/^000004<>//; t dynamic_000004
        s/^000005<>//; t dynamic_000005
        s/^000006<>//; t dynamic_000006
    i Dynamic dispatch failed; printing stack:
    p
    b
