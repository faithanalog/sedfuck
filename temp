
    # Init
    # First line read is the brainfuck code
    # Insert null byte
    # Memory: Stack in hold space
    # One line per entry
    # First line of the stack is the head.
    # Push: { s/$/\n/; G; h }         x `'STACKITEMCAPTURE`'  -> x [x]
    # Peek: { g; s/\n.*$// }          x [a] -> a [a]
    # Drop: { x; s/^[^\n]*\n?//; x }  x [a b] -> x [b]
    # Pop:  Peek; Drop
    # Rotate: { x; s/$\n/; G; h             x [a b c] -> a b c x [a b c x]
    #           s/\n.*$//; x; s/$/\n/; G;   a b c x [a b c x] -> a [a b c x] -> a b c x a [a b c x]
    #           s/^[^\n]*\n//;          a b c x a -> b c x a -> 
    #           
    # Swap: { x; s/$/\n/; G; h x [a b c] -> a b c x [a b c x]
    #       }           
    
    # Stack operations a la lisp 
    # These treat pattern space as a stack, using \x01 as element
    # terminators. Empty stack is a \x01 byte. Front of the stack is ^
    define(`LQ',`changequote(<,>)`dnl'
changequote`'')
    define(`RQ',`changequote(<,>)dnl`
'changequote`'')
    define(`r_ascii', `format(`%c', eval($1))')
    define(``'STACKITEMEND`'', `r_ascii(`$1')')
    define(``'STACKITEMCAPTURE`'', `\([^`'STACKITEMEND`']*`'STACKITEMEND`'\)')

    # Push(x): a b -> x a b
    define(`r_pushstr', `s/^/`$1'`'STACKITEMEND`'/')

    define(`r_pushnum', `s/^/format(`%d%d%d%d%d%d%d%d',eval((($1) >> 7) & 1),eval((($1) >> 6) & 1),eval((($1) >> 5) & 1),eval((($1) >> 4) & 1),eval((($1) >> 3) & 1),eval((($1) >> 2) & 1),eval((($1) >> 1) & 1),eval(($1) & 1))`'STACKITEMEND`'/')


    define(`_jmpidx', 0)
    define(`r_call', `
        define(`_jmpidx', incr(_jmpidx))
        r_pushstr(format(`%06d', _jmpidx))
        b func_`$1'
        : `dynamic_'format(`%06d', _jmpidx)
    ')

    define(`r_func', `
        define(`r_$1', `r_call(`r_$1')')
        : func_r_`$1'
    ')

    # Ret:     [r x] -> [x] (return to r)
    define(`r_ret', `b dynamicDispatch')

    define(`r_endfunc', `r_ret')

    define(`_anonidx', 0)
    define(`r_anon', `define(`_anonidx', format(`%06d', incr(_anonidx)))`anon_'_anonidx')


    # Drop:    a b -> b
    define(`r_drop', `s/^`'STACKITEMCAPTURE`'//')

    # Swap:    a b -> b a
    define(`r_swap', `s/^`'STACKITEMCAPTURE`'`'STACKITEMCAPTURE`'/\2\1/')

    # Rot: a b c -> b c a
    define(`r_rot', `s/^`'STACKITEMCAPTURE`'`'STACKITEMCAPTURE`'`'STACKITEMCAPTURE`'/\2\1/')

    # Dup: a -> a a
    define(`r_dup', `s/^`'STACKITEMCAPTURE`'/\1\1/')

    # 2dup: a b -> a b a b
    define(`r_2dup', `s/^`'STACKITEMCAPTURE`'`'STACKITEMCAPTURE`'/\1\2\1\2')

    # 2drop: a b c -> c
    define(`r_2drop', `s/^`'STACKITEMCAPTURE`'`'STACKITEMCAPTURE`'//')

    # 8 bit binary add
    # X Y -> X+Y
    r_func(`add')
        # Ripply-carry adder
        pushdef(`_i', 0)
        pushdef(`_lp', `
            pushdef(`_end', r_anon)
            s/^0\([01]*\)`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'/00\1`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end
            s/^0\([01]*\)`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'/01\1`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end
            s/^0\([01]*\)`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'/01\1`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end
            s/^0\([01]*\)`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'/11\1`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end

            s/^1\([01]*\)`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'/01\1`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end
            s/^1\([01]*\)`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'/10\1`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end
            s/^1\([01]*\)`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'/10\1`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end
            s/^1\([01]*\)`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'/11\1`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/;
            : _end
            popdef(`_end')

            define(`_i', incr(_i))
            ifelse(_i, 8, , `_lp')
        ')
        _lp
        popdef(`_lp')
        popdef(`_i')

        # Remove carry bit and X/Y args
        s/^[01]\([01]*\)`'STACKITEMEND`'[01]*`'STACKITEMEND`'[01]*`'STACKITEMEND`'/\1`'STACKITEMEND`'/
    r_endfunc

    # Negate 8-bit number
    r_func(`neg')
        pushdef(`step_', r_anon)
        # Invert each bit one at a time
        s/^\([01]*\)0`'STACKITEMEND`'/\11`'STACKITEMEND`'/; t step_`1'
        s/^\([01]*\)1`'STACKITEMEND`'/\10`'STACKITEMEND`'/;
        : step_`1'
        s/^\([01]*\)0\([01]\)`'STACKITEMEND`'/\11\2`'STACKITEMEND`'/; t step_`2'
        s/^\([01]*\)1\([01]\)`'STACKITEMEND`'/\10\2`'STACKITEMEND`'/;
        : step_`2'
        s/^\([01]*\)0\([01][01]\)`'STACKITEMEND`'/\11\2`'STACKITEMEND`'/; t step_`3'
        s/^\([01]*\)1\([01][01]\)`'STACKITEMEND`'/\10\2`'STACKITEMEND`'/;
        : step_`3'
        s/^\([01]*\)0\([01][01][01]\)`'STACKITEMEND`'/\11\2`'STACKITEMEND`'/; t step_`4'
        s/^\([01]*\)1\([01][01][01]\)`'STACKITEMEND`'/\10\2`'STACKITEMEND`'/;
        : step_`4'
        s/^\([01]*\)0\([01][01][01][01]\)`'STACKITEMEND`'/\11\2`'STACKITEMEND`'/; t step_`5'
        s/^\([01]*\)1\([01][01][01][01]\)`'STACKITEMEND`'/\10\2`'STACKITEMEND`'/;
        : step_`5'
        s/^\([01]*\)0\([01][01][01][01][01]\)`'STACKITEMEND`'/\11\2`'STACKITEMEND`'/; t step_`6'
        s/^\([01]*\)1\([01][01][01][01][01]\)`'STACKITEMEND`'/\10\2`'STACKITEMEND`'/;
        : step_`6'
        s/^\([01]*\)0\([01][01][01][01][01][01]\)`'STACKITEMEND`'/\11\2`'STACKITEMEND`'/; t step_`7'
        s/^\([01]*\)1\([01][01][01][01][01][01]\)`'STACKITEMEND`'/\10\2`'STACKITEMEND`'/;
        : step_`7'
        s/^\([01]*\)0\([01][01][01][01][01][01][01]\)`'STACKITEMEND`'/\11\2`'STACKITEMEND`'/; t step_`8'
        s/^\([01]*\)1\([01][01][01][01][01][01][01]\)`'STACKITEMEND`'/\10\2`'STACKITEMEND`'/;
        : step_`8'
        popdef(`step_')
    r_endfunc

    define(`r_sub', `
        r_neg
        r_add
    ')

    define(`r_inc', `
        r_pushnum(1)
        r_add
    ')

    define(`r_dec', `
        r_pushnum(1)
        r_sub
    ')

    define(`r_not', `
        pushdef(`_end', r_anon)
        s/^[0]*`'STACKITEMEND`'/00000001`'STACKITEMEND`'/; t _end
        s/^[^`'STACKITEMEND`']*`'STACKITEMEND`'/00000000`'STACKITEMEND`'/
        : _end
        popdef(`_end')
    ')

    define(`r_eq', `
        r_sub
        r_not
    ')

    # [X Y] -> [X<=Y]
    define(`r_lt', `
        r_sub
        pushdef(`_end', r_anon)
        # If x < y then result will be positive
        s/^0[^`'STACKITEMEND`']*`'STACKITEMEND`'/00000001`'STACKITEMEND`'/; t _end
        s/^1[^`'STACKITEMEND`']*`'STACKITEMEND`'/00000000`'STACKITEMEND`'/
        : _end
        popdef(`_end')
    ')

    define(`r_or', `
        r_add
        r_not
        r_not
    ')

    define(`r_and', `
        r_not
        r_swap
        r_not
        r_or
    ')

    define(`r_le', `
        r_2dup
        r_lt
        r_rot
        r_eq
        r_rot
        r_or
    ')


    define(`r_rshift', `s/^\([01]*\)[01]`'STACKITEMEND`'/0\1/')
    define(`r_lshift', `s/^[01]\([01]*\)`'STACKITEMEND`'/\10/')

    r_func(`bitand')
        pushdef(`_i', 0)
        pushdef(`_lp', `
            pushdef(`_end', r_anon)
            s/^\([01]*\)`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'/\10`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end
            s/^\([01]*\)`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'/\10`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end
            s/^\([01]*\)`'STACKITEMEND`'\([01]*\)0`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'/\10`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/; t _end
            s/^\([01]*\)`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'\([01]*\)1`'STACKITEMEND`'/\11`'STACKITEMEND`'\2`'STACKITEMEND`'\3`'STACKITEMEND`'/
            : _end
            popdef(`_end')

            define(`_i', incr(_i))
            ifelse(_i, 8, , `_lp')
        ')
        _lp
        popdef(`_lp')
        popdef(`_i')
        s/`'STACKITEMCAPTURE`'`'STACKITEMCAPTURE`'`'STACKITEMCAPTURE`'/\1/
    r_endfunc

    r_func(`bin2hex')
        r_dup
        r_pushnum(0xF)
        r_bitand
        pushdef(`_end', r_anon)
        s/^00000000`'STACKITEMEND`'/0/; t _end
        s/^00000001`'STACKITEMEND`'/1/; t _end
        s/^00000010`'STACKITEMEND`'/2/; t _end
        s/^00000011`'STACKITEMEND`'/3/; t _end
        s/^00000100`'STACKITEMEND`'/4/; t _end
        s/^00000101`'STACKITEMEND`'/5/; t _end
        s/^00000110`'STACKITEMEND`'/6/; t _end
        s/^00000111`'STACKITEMEND`'/7/; t _end
        s/^00001000`'STACKITEMEND`'/8/; t _end
        s/^00001001`'STACKITEMEND`'/9/; t _end
        s/^00001010`'STACKITEMEND`'/A/; t _end
        s/^00001011`'STACKITEMEND`'/B/; t _end
        s/^00001100`'STACKITEMEND`'/C/; t _end
        s/^00001101`'STACKITEMEND`'/D/; t _end
        s/^00001110`'STACKITEMEND`'/E/; t _end
        s/^00001111`'STACKITEMEND`'/F/
        : _end
        popdef(`_end')
        r_swap
        r_pushnum(0xF)
        r_rshift
        r_rshift
        r_rshift
        r_rshift
        r_bitand
        pushdef(`_end', r_anon)
        s/^00000000`'STACKITEMEND`'/0/; t _end
        s/^00000001`'STACKITEMEND`'/1/; t _end
        s/^00000010`'STACKITEMEND`'/2/; t _end
        s/^00000011`'STACKITEMEND`'/3/; t _end
        s/^00000100`'STACKITEMEND`'/4/; t _end
        s/^00000101`'STACKITEMEND`'/5/; t _end
        s/^00000110`'STACKITEMEND`'/6/; t _end
        s/^00000111`'STACKITEMEND`'/7/; t _end
        s/^00001000`'STACKITEMEND`'/8/; t _end
        s/^00001001`'STACKITEMEND`'/9/; t _end
        s/^00001010`'STACKITEMEND`'/A/; t _end
        s/^00001011`'STACKITEMEND`'/B/; t _end
        s/^00001100`'STACKITEMEND`'/C/; t _end
        s/^00001101`'STACKITEMEND`'/D/; t _end
        s/^00001110`'STACKITEMEND`'/E/; t _end
        s/^00001111`'STACKITEMEND`'/F/
        : _end
        popdef(`_end')
        s/^\([0-9A-F]\)`'STACKITEMEND`'\([0-9A-F]\)`'STACKITEMEND`'/\2\1`'STACKITEMEND`'/
    r_endfunc

    r_func(`putc')
        r_bin2hex
        pushdef(`tmp_', r_anon)

        /^0/ b tmp_`0'
        /^1/ b tmp_`1'
        /^2/ b tmp_`2'
        /^3/ b tmp_`3'
        /^4/ b tmp_`4'
        /^5/ b tmp_`5'
        /^6/ b tmp_`6'
        /^7/ b tmp_`7'

        : tmp_`0'
        s/^01/r_ascii(0x01)/; t tmp_`end'
        s/^02/r_ascii(0x02)/; t tmp_`end'
        s/^03/r_ascii(0x03)/; t tmp_`end'
        s/^04/r_ascii(0x04)/; t tmp_`end'
        s/^05/r_ascii(0x05)/; t tmp_`end'
        s/^06/r_ascii(0x06)/; t tmp_`end'
        s/^07/r_ascii(0x07)/; t tmp_`end'
        s/^08/r_ascii(0x08)/; t tmp_`end'
        s/^09/r_ascii(0x09)/; t tmp_`end'
        s/^0A/\n/; t tmp_`end'
        s/^0B/r_ascii(0x0B)/; t tmp_`end'
        s/^0C/r_ascii(0x0C)/; t tmp_`end'
        s/^0D/r_ascii(0x0D)/; t tmp_`end'
        s/^0E/r_ascii(0x0E)/; t tmp_`end'
        s/^0F/r_ascii(0x0F)/; t tmp_`end'

        : tmp_`1'
        s/^11/r_ascii(0x11)/; t tmp_`end'
        s/^12/r_ascii(0x12)/; t tmp_`end'
        s/^13/r_ascii(0x13)/; t tmp_`end'
        s/^14/r_ascii(0x14)/; t tmp_`end'
        s/^15/r_ascii(0x15)/; t tmp_`end'
        s/^16/r_ascii(0x16)/; t tmp_`end'
        s/^17/r_ascii(0x17)/; t tmp_`end'
        s/^18/r_ascii(0x18)/; t tmp_`end'
        s/^19/r_ascii(0x19)/; t tmp_`end'
        s/^1A/r_ascii(0x1A)/; t tmp_`end'
        s/^1B/r_ascii(0x1B)/; t tmp_`end'
        s/^1C/r_ascii(0x1C)/; t tmp_`end'
        s/^1D/r_ascii(0x1D)/; t tmp_`end'
        s/^1E/r_ascii(0x1E)/; t tmp_`end'
        s/^1F/r_ascii(0x1F)/; t tmp_`end'

        : tmp_`2'
        s/^20/ /; t tmp_`end'
        s/^21/!/; t tmp_`end'
        s/^22/"/; t tmp_`end'
        s/^23/#/; t tmp_`end'
        s/^24/$/; t tmp_`end'
        s/^25/%/; t tmp_`end'
        s/^26/&/; t tmp_`end'
        s/^27/RQ()/; t tmp_`end'
        s/^28/(/; t tmp_`end'
        s/^29/)/; t tmp_`end'
        s/^2A/*/; t tmp_`end'
        s/^2B/+/; t tmp_`end'
        s/^2C/,/; t tmp_`end'
        s/^2D/-/; t tmp_`end'
        s/^2E/./; t tmp_`end'
        s/^2F/\//; t tmp_`end'

        : tmp_`3'
        s/^30/0/; t tmp_`end'
        s/^31/1/; t tmp_`end'
        s/^32/2/; t tmp_`end'
        s/^33/3/; t tmp_`end'
        s/^34/4/; t tmp_`end'
        s/^35/5/; t tmp_`end'
        s/^36/6/; t tmp_`end'
        s/^37/7/; t tmp_`end'
        s/^38/8/; t tmp_`end'
        s/^39/9/; t tmp_`end'
        s/^3A/:/; t tmp_`end'
        s/^3B/;/; t tmp_`end'
        s/^3C/</; t tmp_`end'
        s/^3D/=/; t tmp_`end'
        s/^3E/>/; t tmp_`end'
        s/^3F/?/; t tmp_`end'

        : tmp_`4'
        s/^40/@/; t tmp_`end'
        s/^41/A/; t tmp_`end'
        s/^42/B/; t tmp_`end'
        s/^43/C/; t tmp_`end'
        s/^44/D/; t tmp_`end'
        s/^45/E/; t tmp_`end'
        s/^46/F/; t tmp_`end'
        s/^47/G/; t tmp_`end'
        s/^48/H/; t tmp_`end'
        s/^49/I/; t tmp_`end'
        s/^4A/J/; t tmp_`end'
        s/^4B/K/; t tmp_`end'
        s/^4C/L/; t tmp_`end'
        s/^4D/M/; t tmp_`end'
        s/^4E/N/; t tmp_`end'
        s/^4F/O/; t tmp_`end'

        : tmp_`5'
        s/^50/P/; t tmp_`end'
        s/^51/Q/; t tmp_`end'
        s/^52/R/; t tmp_`end'
        s/^53/S/; t tmp_`end'
        s/^54/T/; t tmp_`end'
        s/^55/U/; t tmp_`end'
        s/^56/V/; t tmp_`end'
        s/^57/W/; t tmp_`end'
        s/^58/X/; t tmp_`end'
        s/^59/Y/; t tmp_`end'
        s/^5A/Z/; t tmp_`end'
        s/^5B/[/; t tmp_`end'
        s/^5C/\\/; t tmp_`end'
        s/^5D/]/; t tmp_`end'
        s/^5E/^/; t tmp_`end'
        s/^5F/_/; t tmp_`end'

        : tmp_`6'
        s/^60/LQ()/; t tmp_`end'
        s/^61/a/; t tmp_`end'
        s/^62/b/; t tmp_`end'
        s/^63/c/; t tmp_`end'
        s/^64/d/; t tmp_`end'
        s/^65/e/; t tmp_`end'
        s/^66/f/; t tmp_`end'
        s/^67/g/; t tmp_`end'
        s/^68/h/; t tmp_`end'
        s/^69/i/; t tmp_`end'
        s/^6A/j/; t tmp_`end'
        s/^6B/k/; t tmp_`end'
        s/^6C/l/; t tmp_`end'
        s/^6D/m/; t tmp_`end'
        s/^6E/n/; t tmp_`end'
        s/^6F/o/; t tmp_`end'

        : tmp_`7'
        s/^70/p/; t tmp_`end'
        s/^71/q/; t tmp_`end'
        s/^72/r/; t tmp_`end'
        s/^73/s/; t tmp_`end'
        s/^74/t/; t tmp_`end'
        s/^75/u/; t tmp_`end'
        s/^76/v/; t tmp_`end'
        s/^77/w/; t tmp_`end'
        s/^78/x/; t tmp_`end'
        s/^79/y/; t tmp_`end'
        s/^7A/z/; t tmp_`end'
        s/^7B/{/; t tmp_`end'
        s/^7C/|/; t tmp_`end'
        s/^7D/}/; t tmp_`end'
        s/^7E/~/; t tmp_`end'
        s/^7F/r_ascii(0x7F)/; t tmp_`end'

        : tmp_`end'

        h
        x
        s/^\(.\).*$/\1/
        p
        x
        s/.`'STACKITEMEND`'//
        popdef(`tmp_')
    r_endfunc

    s/^.*$//g
    r_pushnum(0x70)
    r_putc

    # Increment a binary number
#    : increment
#    s/\([01]*\)0$/\11/; t endIncrement
#    s/\([01]*\)01$/\110/; t endIncrement
#    s/\([01]*\)011$/\1110/; t endIncrement
#    s/\([01]*\)0111$/\11110/; t endIncrement
#    s/\([01]*\)01111$/\111110/; t endIncrement
#    s/\([01]*\)011111$/\1111110/; t endIncrement
#    s/\([01]*\)0111111$/\11111110/; t endIncrement
#    s/\([01]*\)01111111$/\111111110/; t endIncrement
#    s/11111111$/00000000/
#    : endIncrement
#
#    : decrement



# TODO make this a tree instead of linear search
: dynamicDispatch
    pushdef(`_i', 0)
    pushdef(`_lp', `
        define(`_i', incr(_i))
        s/^format(`%06d', _i)`'STACKITEMEND`'//; t `dynamic_'format(`%06d', _i)
        ifelse(_i, _jmpidx, , `_lp')
    ')
    _lp
    popdef(`_lp')
    popdef(`_i')
